export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="norm" 

DISABLE_UPDATE_PROMPT="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Auto completion
autoload -U compinit
compinit


# Disable pyenv prompt
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# Disable auto escape :) 
export DISABLE_MAGIC_FUNCTIONS=true

plugins=(git vi-mode zsh-syntax-highlighting)#zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# Adds `code` cli to open files/folders in vscode
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# Adds sbin
export PATH="$PATH:/usr/local/sbin"
export PATH="$PATH:/usr/sbin"
export PATH="$PATH:/sbin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/.dotnet/tools"


# Disable python SSL URLLIB warnings
export PYTHONWARNINGS="ignore:Unverified HTTPS request"

# FZF configuration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Language
export LANG=fr_FR.UTF-8

# Editor
export EDITOR='nvim'

# Pyenv init
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

# Go Path configuration
export GOPATH=$HOME/go

# Add Go binaries
export PATH=$HOME/.cargo/bin/:$PATH

# Add Go binaries
export PATH=$HOME/go/bin:$PATH

# Add home binaries
export PATH=$HOME/bin:$PATH

# OpenSSL binaries
export PATH="/usr/local/opt/openssl/bin:$PATH"

# Android SDK utilities Binary
export PATH="$HOME/Library/Android/sdk/build-tools/29.0.2":$PATH

# Bitwarden 
. $HOME/.bitwarden-session

# Aliases
alias ls="exa"
alias l="ls -lA"
alias e="nvim"
alias c="code"
alias ls="exa"
alias cat="bat --theme=TwoDark"
alias lsa="exa -a"
alias l="exa -lhHiuU --git --icons -a"
alias locate="fd"
alias lt="exa -lhHiuU --git -T --icons -a"
alias lr="exa -lhHiuU --git -R --icons -a"
alias md="mkdir -p"
alias clip='pbcopy'
alias py='python'
alias dc="docker compose"
alias http='http --verify=no'
alias https='http --default-scheme=https --verify=no'
alias httpburp='http --proxy=http:http://127.0.0.1:8080 --proxy=https:http://127.0.0.1:8080'
alias fuzz='ffuf -c -H "User-Agent: test" -of html -t 1 -mc all'
alias fuzz_method='fuzz -X FUZZ -w ~/workspace/wordlists/http_methods.txt -t 8 -o _http_methods.txt -u'
alias weather="curl wttr.in"
alias random="head -c 8 /dev/urandom | rax2 -S"
alias render="w3m -T text/html -dump"
alias t="tmux"
alias ipinfo="curl -s ipinfo.io|jq -r '.ip'"
alias make="make -j8"
alias nnn="nnn -oHU"
alias br="br -sdph -c ':toggle_preview;'"
alias x="hexyl"
alias m="cmatrix"


# Functions

update_prompt() {
  source $HOME/.zshrc
}

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 50); do /usr/bin/time $shell -i -c exit; done
}


pyenv_init() {
  eval "$(pyenv init -)"
}

burp() {
  local p="http://127.0.0.1:8080"
  export HTTP_PROXY="${p}"
  export HTTPS_PROXY="${p}"
  export http_proxy="${p}"
  export https_proxy="${p}"
  update_prompt
}


unburp() {
  unset HTTP_PROXY
  unset HTTPS_PROXY
  unset http_proxy
  unset https_proxy
  update_prompt
}

nmapFast() {
  if [[ -z $1 ]] ; then
    echo "USAGE: nmapFast IP/Domain"
    return
  fi

  item=$1
  item2=$(echo -ne $item|tr '/' '_')

  echo " +++ "
  echo "[±] Starting Fast Nmap Scan for $item"
  echo " +++ "

  # nmap -vvv -sTV -Pn -n --top-ports=100 --reason --open --version-intensity=7 -T4 -oA "${item2}_fast" "$item"
  # nmap -vvv -n -sV --reason -Pn --version-intensity=3 --top-ports=1000 -oA "${item2}_fast" "$item"
  nmap -vvv -sTV -Pn -n --top-ports=1000 --reason --open --version-intensity=7 -T4 -oA "${item2}_fast" "$item"
}


nmapFastScript() {
  if [[ -z $1 ]] ; then
    echo "USAGE: nmapFast IP/Domain"
    return
  fi

  item=$1

  echo " +++ "
  echo "[±] Starting Fast Nmap Scan for $item"
  echo " +++ "

  nmap -vvv -n -sC -sV --reason -Pn --version-intensity=3 --top-ports=1000 -oA "${item}_script" "$item"
}


nmapFull() {
  if [[ -z $1 ]] ; then
    echo "USAGE: nmapFull IP/Domain"
    return
  fi

  item=$1
  item2=$(echo $item | tr '/' '_')

  echo " +++ "
  echo "[±] Starting Full Nmap Scan for $item"
  echo " +++ "

  nmap -vvv -sTV -Pn -p- --reason --open --version-intensity=7 --script='*banner,http-enum,http-headers,http-title,*ssl-cert' --script-timeout=1m -T4 -oA "${item2}_full" "$item"
}



nmapLdap() {
  if [[ -z $1 ]] ; then
    echo "USAGE: nmapFull IP/Domain"
    return
  fi

  item=$1
  item2=$(echo $item | tr '/' '_')

  echo " +++ "
  echo "[±] Starting Ldap Nmap Scan for $item"
  echo " +++ "

  nmap --reason -sTV -vvv -p389 --script ldap-search -oA ldap_search -oA "${item2}_full" "$item"
}


nmapUDP() {
  if [[ -z $1 ]] ; then
    echo "USAGE: nmapUDP IP/Domain"
    return
  fi

  item=$1

  echo " +++ "
  echo "[±] Starting UDP Nmap Scan for $item"
  echo " +++ "

  sudo nmap -vvv -n -sUV --reason -Pn -p 43,53,67,68,111,137,138,139,161,500,1434,1604 -oA "${item}_udp_full" "$item"
}

nmapTopTCP() {

  if [[ -z $1 ]] ; then
    echo "USAGE: nmapTopTCP IP/Domain"
    return
  fi

  item=$1

  echo " +++ "
  echo "[±] Starting Top TCP Nmap Scan for $item"
  echo " +++ "

  sudo nmap -vvv -n -sSV -reason -Pn -p 0,7,21,22,23,25,53,79,80,81,82,83,84,85,86,87,88,89,90,111,137,138,139,379,389,390,443,445,446,513,514,548,623,631,636,843,873,902,990,1098,1099,1194,1352,1414,1433,1443,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1583,1723,1812,1883,2000,2006,2049,2082,2083,2086,2100,2106,2156,2205,2224,2301,2376,2381,2638,3000,3050,3128,3200,3260,3268,3269,3299,3306,3310,3351,3389,3466,3480,3632,3668,3690,4001,4280,4343,4443,4679,4711,4743,4750,4848,4949,5000,5001,5005,5006,5353,5432,5433,5445,5555,5601,5666,5672,5869,5900,5901,5984,5985,5986,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6060,6061,6112,6129,6161,6262,6379,6690,7001,7002,7080,7183,7272,7474,7670,7676,7779,8000,8001,8006,8009,8019,8020,8080,8081,8082,8083,8084,8089,8090,8161,8162,8181,8282,8300,8400,8443,8471,8500,8501,8834,8880,8887,8888,8980,9000,9012,9042,9043,9060,9080,9081,9090,9091,9200,9300,9400,9418,9443,9471,9495,9704,9788,9875,9997,9998,10000,10443,11211,11311,12174,13131,16102,16200,17988,17990,19200,27017,27018,27019,28017,32764,35357,38292,41080,41443,50000,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50080,50100,61616 -oA "${item}_top_tcp" "$item"
}


d () {
  date +"%Y-%m-%d_%H-%M"
}


NOTES_DIR="${HOME}/workspace/notes"

notes () {
  br  "$NOTES_DIR"

}

note () {
  mkdir -p "${NOTES_DIR}"

  _date=$(date +"%Y-%m-%d_%H-%M"|tr -d '\n')
  $EDITOR "${NOTES_DIR}/note-${_date}.md"
}


imgcpy () {
  if [ $# -lt 2 ]; then
    echo "No arguments supplied"
    return
  fi

  FILE="$1"


  if  [[ ! -f "$FILE" ]] ; then
    echo "File $FILE does not exist"
    return
  fi

  TITLE=$(echo -ne $2 | tr -c '[:alnum:]._-' '_')
  DATE=$(d)
  EXT=${FILE##*.}

  NEW_FILE_PATH="./$DATE"_"$TITLE.copy.$EXT"
  cp -f "$FILE" "$NEW_FILE_PATH"
  echo $NEW_FILE_PATH

  NEW_FILE_PATH="./$DATE"_"$TITLE.$EXT"
  cp -f "$FILE" "$NEW_FILE_PATH"
  echo $NEW_FILE_PATH
}

transfer(){ if [ $# -eq 0 ];then echo "No arguments specified.\nUsage:\n  transfer <file|directory>\n  ... | transfer <file_name>">&2;return 1;fi;if tty -s;then file="$1";file_name=$(basename "$file");if [ ! -e "$file" ];then echo "$file: No such file or directory">&2;return 1;fi;if [ -d "$file" ];then file_name="$file_name.zip" ,;(cd "$file"&&zip -r -q - .)|curl --progress-bar --upload-file "-" "https://transfer.sakiir.ovh/$file_name"|tee /dev/null,;else cat "$file"|curl --progress-bar --upload-file "-" "https://transfer.sakiir.ovh/$file_name"|tee /dev/null;fi;else file_name=$1;curl --progress-bar --upload-file "-" "https://transfer.sakiir.ovh/$file_name"|tee /dev/null;fi;}

export CWDFILE="$HOME/.workdir"

setcwd () {
  echo -n "$(pwd)" > "$CWDFILE"
}

cwd () {
  CWD=$(cat $CWDFILE)
  echo "$CWD"
}

ccwd () {
  c=$(cwd)
  cd "$c"
}

urldecode () {
  node -e 'process.stdout.write(decodeURIComponent(process.argv[1]));' "$1"
}

urlencode () {
  node -e 'process.stdout.write(encodeURIComponent(process.argv[1]));' "$1"
}

#########################
# MUTAGEN CONFIGURATION #
#########################

# Aliases
# example: 
# - msm PROJECT
# - msf PROJECT
# - msp PROJECT
# - msr PROJECT
# etc
alias msm="mutagen sync monitor"
alias msf="mutagen sync flush"
alias msp="mutagen sync pause"
alias msr="mutagen sync resume"
alias mst="mutagen sync terminate"
alias msl="mutagen sync list"

cdm() {
    if test "$#" -lt 1 ; then
      echo "USAGE: $0 PROJECT"
      return
    fi
    remote_path=$(mutagen sync list -l "${1}"|fgrep 'URL:'|cut -d':' -f2|tail -n1|sed 's/^ //g')
    echo "$remote_path"
}

msc() {
    if test "$#" -lt 3 ; then
      echo "USAGE: $0 PROJECT_name LOCALPATH REMOTEPATH"
      return
    fi
    projectname=$(echo -ne "mut_${1}" | tr -cd '[:alnum:]')
    localpath="${2}"
    remotepath="${3}"
    echo "[~] Creating Synchronisation:"
    echo -e "\tProject: ${projectname}"
    echo -e "\tLocal: ${locapath}"
    echo -e "\tRemote: ${remotepath}"
    mutagen sync create --watch-mode="portable" \
                        --scan-mode="accelerated" \
                        --sync-mode="two-way-resolved" \
                        --ignore ".sync.ffs_db" \
                        --ignore "*.ova" \
                        --ignore "_*" \
                        --name="${projectname}" "${localpath}" "${remotepath}"
}

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

if [[ -n $VIRTUAL_ENV && -e "${VIRTUAL_ENV}/bin/activate" ]]; then
  source "${VIRTUAL_ENV}/bin/activate"
fi

export PATH="$HOME/.poetry/bin:$PATH"

source "$HOME/.config/broot/launcher/bash/br"

eval "$(starship init zsh)"
